{"version":3,"sources":["features/todoSlice.js","app/components/Input.js","app/components/TtodoIO.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["initialState","todoList","JSON","parse","localStorage","getItem","todoSlice","createSlice","name","reducers","saveTodo","state","action","push","payload","setItem","stringify","setCheck","map","item","id","done","clear","actions","selectTodoList","todos","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","Date","now","TodoIO","Checkbox","checked","color","inputProps","App","useSelector","store","configureStore","reducer","todoReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAEMA,EAAe,CACjBC,SAAUC,KAAKC,MAAMC,aAAaC,QAAQ,oBAAsB,IAG9DC,EAAYC,YAAY,CAC1BC,KAAM,QACNR,eACAS,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMV,SAASY,KAAKD,EAAOE,SAC3BV,aAAaW,QAAQ,iBAAiBb,KAAKc,UAAUL,EAAMV,YAE/DgB,SAAU,SAACN,EAAMC,GACbD,EAAMV,SAASiB,KAAI,SAAAC,GACZP,EAAOE,UAAYK,EAAKC,KACvBD,EAAKE,MAAQF,EAAKE,SAG1BjB,aAAakB,QACblB,aAAaW,QAAQ,iBAAiBb,KAAKc,UAAUL,EAAMV,eAKhE,EAGHK,EAAUiB,QAFVb,EADG,EACHA,SACAO,EAFG,EAEHA,SAGSO,EAAiB,SAAAb,GAAK,OAAIA,EAAMc,MAAMxB,UAEpCK,IAAf,Q,OCLeoB,EAtBD,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAWjB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAACC,GAAD,OAAMP,EAASO,EAAEC,OAAOH,UACnE,wBAAQI,QAZA,WAEZR,EAASpB,EAAS,CACdS,KAAMS,EACNP,MAAM,EACND,GAAGmB,KAAKC,SAEZX,EAAS,KAKL,qB,gBCGGY,EAnBA,SAAC,GAAsB,IAArBjC,EAAoB,EAApBA,KAAMa,EAAc,EAAdA,KAAMD,EAAQ,EAARA,GACvBU,EAAWC,cAKb,OACI,sBAAKC,UAAU,YAAf,UACI,cAACU,EAAA,EAAD,CACIC,QAAStB,EACTuB,MAAM,UACNT,SATQ,WAChBL,EAASb,EAASG,KASVyB,WAAY,CAAE,aAAc,wBAEhC,mBAAGb,UAAWX,GAAQ,kBAAtB,SAA0Cb,QCWvCsC,MAvBf,WAEE,IAAM7C,EAAW8C,YAAYvB,GAE7B,OACE,sBAAKQ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,6CAEF,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,iBAAf,SAEI/B,EAASiB,KAAI,SAAAC,GAAI,OACf,cAAC,EAAD,CAAQX,KAAQW,EAAKA,KAAME,KAAMF,EAAKE,KAAMD,GAAID,EAAKC,UAI3D,cAAC,EAAD,WCvBK4B,EAAQC,YAAe,CAClCC,QAAS,CACPzB,MAAO0B,IAIXC,OAAOC,8BAAgCD,OAAOC,gCCG1BC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.bd8eda1b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: JSON.parse(localStorage.getItem('todo-list-item')) || []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo: (state, action) => {\r\n            state.todoList.push(action.payload)\r\n            localStorage.setItem('todo-list-item',JSON.stringify(state.todoList));\r\n        },\r\n        setCheck: (state,action) =>{\r\n            state.todoList.map(item =>{\r\n                if(action.payload === item.id){\r\n                    item.done = !item.done;\r\n                }\r\n            })\r\n            localStorage.clear();\r\n            localStorage.setItem('todo-list-item',JSON.stringify(state.todoList));\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTodo,\r\n    setCheck\r\n} = todoSlice.actions;\r\n\r\nexport const selectTodoList = state => state.todos.todoList;\r\n\r\nexport default todoSlice.reducer;","import { React, useState } from 'react'\r\nimport './Input.css';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveTodo } from '../../features/todoSlice';\r\n\r\nconst Input = () => {\r\n\r\n    const [input,setInput] =  useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodo = () => {\r\n        \r\n        dispatch(saveTodo({\r\n            item: input,\r\n            done: false,\r\n            id:Date.now(),\r\n        }))\r\n        setInput('');\r\n    }\r\n    return (\r\n        <div className='input'>\r\n            <input type='text' value={input} onChange={(e)=> setInput(e.target.value)}/>\r\n            <button onClick={addTodo}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react'\r\nimport './TodoIO.css';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { setCheck } from '../../features/todoSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst TodoIO = ({name, done, id}) => {\r\nconst dispatch = useDispatch();\r\n    const handleCheck = () => {\r\n        dispatch(setCheck(id));\r\n    }\r\n    \r\n    return (\r\n        <div className='todo-item'>\r\n            <Checkbox\r\n                checked={done}\r\n                color='primary'\r\n                onChange={handleCheck}\r\n                inputProps={{ 'aria-label': 'secondary checkbox'}}\r\n                />\r\n            <p className={done && 'todo-item--done'}>{name}</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoIO\r\n","import React from 'react';\nimport './App.css';\nimport Input from './app/components/Input';\nimport TodoIO from './app/components/TtodoIO';\n\nimport { useSelector } from 'react-redux';\nimport { selectTodoList } from './features/todoSlice';\n\n\nfunction App() {\n\n  const todoList = useSelector(selectTodoList)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Todo List</h1>\n      </header>\n      <div className='app-container'>\n        <div className='todo-container'>\n          {\n            todoList.map(item =>(\n              <TodoIO name = {item.item} done={item.done} id={item.id}/>\n            ))\n          }\n        </div>\n        <Input />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoReducer \n  },\n},\n// redux devtool extension permission\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}